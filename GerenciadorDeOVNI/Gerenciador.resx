<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AAAAAElFTkSuQmCC
</value>
  </data>
</root>