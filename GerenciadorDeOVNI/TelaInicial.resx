<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>